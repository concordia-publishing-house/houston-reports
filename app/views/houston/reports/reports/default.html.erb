<ul id="reports_timeframes" class="nav nav-tabs" role="tablist">
  <li role="presentation">
    <a href="#week" aria-controls="home" role="tab" data-toggle="tab">Last Week</a>
  </li>
  <li role="presentation" class="active">
    <a href="#month" aria-controls="home" role="tab" data-toggle="tab">Last Month</a>
  </li>
  <li role="presentation">
    <a href="#3months" aria-controls="profile" role="tab" data-toggle="tab">Last 3 Months</a>
  </li>
  <li role="presentation">
    <a href="#6months" aria-controls="profile" role="tab" data-toggle="tab">Last 6 Months</a>
  </li>
 </ul>

<div id="reports"></div>

<% content_for :javascripts do %>
<script type="text/javascript">
  $(function() {
    function byTimestamp(measurements, iterator) {
      var resultsByTimestamp = {}, result;
      _.each(measurements, function(measurement) {
        result = resultsByTimestamp[measurement.timestamp];
        resultsByTimestamp[measurement.timestamp] = iterator(measurement, result);
      });
      return resultsByTimestamp;
    }

    function mapValues(resultsByTimestamp, iterator) {
      return _.map(resultsByTimestamp, function(result, timestamp) {
        return { timestamp: timestamp, value: iterator(timestamp, result) };
      });
    }

    function reduceMeasurements(coalesceByTimestamp, computeValues) {
      return function(measurements) {
        return mapValues(
          byTimestamp(measurements, coalesceByTimestamp),
          computeValues);
      };
    }

    function reducePercentOfTimeWorked() {
      return reduceMeasurements(
        function(measurement, hours) {
          hours = hours || { worked: 0, charged: 0 };
          if(measurement.name == 'daily.hours.worked') {
            hours.worked += +measurement.value;
          } else {
            hours.charged += +measurement.value;
          }
          return hours;
        },
        function(timestamp, hours) {
          date = new Date(timestamp)
          if(date.getDay() > 0 && date.getDay() < 6 && hours.worked > 0) {
            return (hours.charged * 100) / hours.worked;
          } else {
            return null;
          }
        }
      );
    }

    function toPercent(measurements) {
      return _.map(measurements, function(measurement) {
        measurement.value = 100.0 * +measurement.value;
        return measurement;
      });
    }


    var sections = [
        {
          section: 'Alerts',
          reports: [ {
              name: 'Open Alerts at 9am',
              min: 0,
              measurements: { name: 'daily.alerts.open' }
            }, {
              name: 'Time Spent on Alerts',
              units: '%',
              min: 0,
              measurements: {
                name: ['daily.hours.worked', 'daily.hours.charged.{cve,exception,itsm}'],
                subject_type: 'User' },
              map: reducePercentOfTimeWorked()
            }, {
              name: 'Alerts Closed On-Time',
              units: '%',
              min: 0,
              max: 100,
              measurements: { name: 'daily.alerts.due.completed-on-time.percent' },
              map: toPercent
            } ]
        },

        {
          section: 'Time',
          reports: [ {
            name: 'Time Charged',
            units: '%',
            min: 0,
            measurements: {
              name: ['daily.hours.worked', 'daily.hours.charged'],
              subject_type: 'User' },
            map: reducePercentOfTimeWorked()
          }, {
            name: 'Time Spent on Development',
            units: '%',
            min: 0,
            measurements: {
              subject_type: 'User',
              name: ['daily.hours.worked', 'daily.hours.charged.{development,ix-design}'] },
            map: reducePercentOfTimeWorked()
          }, {
            name: 'Time Spent on Maintenance',
            units: '%',
            min: 0,
            measurements: {
              subject_type: 'User',
              name: ['daily.hours.worked', 'daily.hours.charged.{chore,cve,exception,itsm,support}'] },
            map: reducePercentOfTimeWorked()
          } ]
        }
      ];

    _.each(['members', 'unite', 'ledger'], function(project) {
      sections.push({
          section: project,
          reports: [ {
            name: 'Number of Requests',
            min: 0,
            measurements: {
              project: project,
              name: 'daily.requests' }
          }, {
            name: 'Mean Response Time',
            units: 'ms',
            measurements: {
              project: project,
              name: 'daily.requests.duration.mean' }
          }, {
            name: '98th Percentile Response Time',
            units: 'ms',
            measurements: {
              project: project,
              name: 'daily.requests.duration.percentile.98' }
          }, {
            name: 'Exception Percentage',
            units: '%',
            format: '.3f',
            min: 0,
            measurements: {
              project: project,
              name: 'daily.requests.5xx.percent' },
            map: toPercent
          } ]
        });
    });

    new ReportsView({
      el: $('#reports')[0],
      sections: sections
    }).render();
  });
</script>
<% end %>
